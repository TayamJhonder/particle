<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>My Cool Personal Site</title>
    <style>
        /* General body settings */
        body {
            margin: 0;
            padding: 0;
            font-family: 'Arial', sans-serif;
            background-color: #000000; /* Changed to black background */
            overflow: hidden;
        }

        /* Making it responsive for mobile, laptop, and desktop */
        html, body {
            height: 100%;
            width: 100%;
        }

        .content {
            position: relative;
            z-index: 2;
            text-align: center;
            color: white;
            top: 20%;
            transform: translateY(-20%);
            padding: 20px;
        }

        .content h1 {
            font-size: 3em;
        }

        .content p {
            font-size: 1.5em;
        }

        /* Cool background animation */
        .background-animation {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: linear-gradient(120deg, #000000, #222222, #000000); /* Black-themed gradient */
            background-size: 300% 300%;
            animation: gradientAnimation 10s ease infinite;
            z-index: 1;
        }

        @keyframes gradientAnimation {
            0% { background-position: 0% 50%; }
            50% { background-position: 100% 50%; }
            100% { background-position: 0% 50%; }
        }
        
        /* Spider web particle effect */
        #spider-web-canvas {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            z-index: 3;
            pointer-events: none;
        }
    </style>
</head>
<body>
    <div class="background-animation"></div>
    
    <div class="content">
        <h1>Welcome to My Personal Site</h1>
        <p>Hi! I'm [Your Name].</p>
        <p>I am currently studying [Your Field of Study], and I have a passion for technology, creativity, and learning.</p>
        <p>In my study life, I focus on mastering both technical and soft skills to prepare myself for future challenges in the tech industry.</p>
        <p>On this website, you'll find my projects, thoughts, and ideas!</p>
    </div>

    <!-- Spider web particle canvas -->
    <canvas id="spider-web-canvas"></canvas>

    <script>
        const canvas = document.getElementById('spider-web-canvas');
        const ctx = canvas.getContext('2d');
        canvas.width = window.innerWidth;
        canvas.height = window.innerHeight;

        let particlesArray;
        const mouse = { x: null, y: null, radius: 150 };

        window.addEventListener('mousemove', (event) => {
            mouse.x = event.x;
            mouse.y = event.y;
        });

        // Create particle class
        class Particle {
            constructor(x, y, directionX, directionY, size, hue) {
                this.x = x;
                this.y = y;
                this.directionX = directionX;
                this.directionY = directionY;
                this.size = size;
                this.hue = hue; // Hue for rainbow color
            }

            draw() {
                ctx.beginPath();
                ctx.arc(this.x, this.y, this.size, 0, Math.PI * 2, false);
                ctx.fillStyle = `hsl(${this.hue}, 100%, 50%)`; // Rainbow color
                ctx.fill();
            }

            update() {
                let dx = mouse.x - this.x;
                let dy = mouse.y - this.y;
                let distance = Math.sqrt(dx * dx + dy * dy);

                if (distance < mouse.radius) {
                    if (mouse.x < this.x && this.x < canvas.width - this.size * 10) {
                        this.x += 10;
                    }
                    if (mouse.x > this.x && this.x > this.size * 10) {
                        this.x -= 10;
                    }
                    if (mouse.y < this.y && this.y < canvas.height - this.size * 10) {
                        this.y += 10;
                    }
                    if (mouse.y > this.y && this.y > this.size * 10) {
                        this.y -= 10;
                    }
                }

                if (this.x + this.size > canvas.width || this.x - this.size < 0) {
                    this.directionX = -this.directionX;
                }
                if (this.y + this.size > canvas.height || this.y - this.size < 0) {
                    this.directionY = -this.directionY;
                }
                this.x += this.directionX;
                this.y += this.directionY;
                this.hue += 0.5; // Cycle through the rainbow
                if (this.hue >= 360) this.hue = 0; // Reset hue after full rotation
                this.draw();
            }
        }

        // Initialize particle array
        function init() {
            particlesArray = [];
            let numberOfParticles = (canvas.width * canvas.height) / 4000; // More particles
            for (let i = 0; i < numberOfParticles; i++) {
                let size = Math.random() * 2 + 1;
                let x = Math.random() * (canvas.width - size * 2) + size;
                let y = Math.random() * (canvas.height - size * 2) + size;
                let directionX = (Math.random() * 1.2) - 0.6;
                let directionY = (Math.random() * 1.2) - 0.6;
                let hue = Math.random() * 360; // Initial random hue for rainbow effect

                particlesArray.push(new Particle(x, y, directionX, directionY, size, hue));
            }
        }

        function animate() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);
            for (let i = 0; i < particlesArray.length; i++) {
                particlesArray[i].update();
            }
            connectParticles();
            requestAnimationFrame(animate);
        }

        function connectParticles() {
            let opacityValue = 1;
            for (let a = 0; a < particlesArray.length; a++) {
                for (let b = a; b < particlesArray.length; b++) {
                    let distance = ((particlesArray[a].x - particlesArray[b].x) * (particlesArray[a].x - particlesArray[b].x)) +
                        ((particlesArray[a].y - particlesArray[b].y) * (particlesArray[a].y - particlesArray[b].y));
                    if (distance < (canvas.width / 7) * (canvas.height / 7)) {
                        opacityValue = 1 - (distance / 15000);
                        ctx.strokeStyle = `rgba(255, 255, 255, ${opacityValue})`;
                        ctx.lineWidth = 1;
                        ctx.beginPath();
                        ctx.moveTo(particlesArray[a].x, particlesArray[a].y);
                        ctx.lineTo(particlesArray[b].x, particlesArray[b].y);
                        ctx.stroke();
                    }
                }
            }
        }

        window.addEventListener('resize', function () {
            canvas.width = innerWidth;
            canvas.height = innerHeight;
            init();
        });

        init();
        animate();
    </script>
</body>
</html>
